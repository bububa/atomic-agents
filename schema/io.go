package schema

import "encoding/json"

// Input implements BaseAgentInputSchema
// This schema represents the input from the user to the AI agent.
type Input struct {
	Base
	// ChatMessage is the chat message sent by the user to the assistant.
	ChatMessage string `json:"chat_message" jsonschema:"title=chat_message,description=The chat message sent by the user to the assistant."`
}

// NewInput returns a new BaseAgentInput
func NewInput(chatMessage string) *Input {
	ret := new(Input)
	ret.ChatMessage = chatMessage
	return ret
}

// String implements Schema interface
func (s Input) String() string {
	bs, _ := json.Marshal(s)
	return string(bs)
}

// Snapshot implements Schema interface
func (s Input) Snapshot() Schema {
	return Input{
		Base:        s.Base,
		ChatMessage: s.ChatMessage,
	}
}

// Output implements BaseAgentOutputSchema
// This schema represents the response generated by the chat agent.
type Output struct {
	Base
	// ChatMessage is the chat message exchanged between the user and the chat agent.
	// contains the markdown-enabled response generated by the chat agent.
	ChatMessage string `json:"chat_message" jsonschema:"title=chat_message,description=The chat message exchanged between the user and the chat agent.This contains the markdown-enabled response generated by the chat agent."`
}

// NewOutput returns a new BaseAgentOutput
func NewOutput(chatMessage string) *Output {
	ret := new(Output)
	ret.ChatMessage = chatMessage
	return ret
}

// String implements Schema interface
func (s Output) String() string {
	bs, _ := json.Marshal(s)
	return string(bs)
}

// Snapshot implements Schema interface
func (s Output) Snapshot() Schema {
	return Output{
		Base:        s.Base,
		ChatMessage: s.ChatMessage,
	}
}
